// Code generated by ogen, DO NOT EDIT.

package generated

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// GetMeasurementsByStation implements getMeasurementsByStation operation.
	//
	// Returns the latest measurement for each parameter at a specific station.
	//
	// GET /stations/{id}/measurements
	GetMeasurementsByStation(ctx context.Context, params GetMeasurementsByStationParams) (*GetMeasurementsByStationOK, error)
	// GetParametersByStation implements getParametersByStation operation.
	//
	// Returns all parameters measured at a specific station.
	//
	// GET /stations/{id}/parameters
	GetParametersByStation(ctx context.Context, params GetParametersByStationParams) (*GetParametersByStationOK, error)
	// GetStationById implements getStationById operation.
	//
	// Returns a specific station by its ID.
	//
	// GET /stations/{id}
	GetStationById(ctx context.Context, params GetStationByIdParams) (GetStationByIdRes, error)
	// GetStations implements getStations operation.
	//
	// Returns a list of all air quality stations.
	//
	// GET /stations
	GetStations(ctx context.Context) (*GetStationsOK, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
