// Code generated by ogen, DO NOT EDIT.

package generated

// Ref: #/components/schemas/Coordinates
type Coordinates struct {
	Latitude  OptFloat64 `json:"latitude"`
	Longitude OptFloat64 `json:"longitude"`
}

// GetLatitude returns the value of Latitude.
func (s *Coordinates) GetLatitude() OptFloat64 {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s *Coordinates) GetLongitude() OptFloat64 {
	return s.Longitude
}

// SetLatitude sets the value of Latitude.
func (s *Coordinates) SetLatitude(val OptFloat64) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *Coordinates) SetLongitude(val OptFloat64) {
	s.Longitude = val
}

// Ref: #/components/schemas/Country
type Country struct {
	ID   OptInt32  `json:"id"`
	Code OptString `json:"code"`
	Name OptString `json:"name"`
}

// GetID returns the value of ID.
func (s *Country) GetID() OptInt32 {
	return s.ID
}

// GetCode returns the value of Code.
func (s *Country) GetCode() OptString {
	return s.Code
}

// GetName returns the value of Name.
func (s *Country) GetName() OptString {
	return s.Name
}

// SetID sets the value of ID.
func (s *Country) SetID(val OptInt32) {
	s.ID = val
}

// SetCode sets the value of Code.
func (s *Country) SetCode(val OptString) {
	s.Code = val
}

// SetName sets the value of Name.
func (s *Country) SetName(val OptString) {
	s.Name = val
}

type GetMeasurementsByStationOK struct {
	Data []Measurement `json:"data"`
}

// GetData returns the value of Data.
func (s *GetMeasurementsByStationOK) GetData() []Measurement {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetMeasurementsByStationOK) SetData(val []Measurement) {
	s.Data = val
}

type GetParametersByStationOK struct {
	Data []Parameter `json:"data"`
}

// GetData returns the value of Data.
func (s *GetParametersByStationOK) GetData() []Parameter {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetParametersByStationOK) SetData(val []Parameter) {
	s.Data = val
}

// GetStationByIdNotFound is response for GetStationById operation.
type GetStationByIdNotFound struct{}

func (*GetStationByIdNotFound) getStationByIdRes() {}

type GetStationByIdOK struct {
	Data OptStation `json:"data"`
}

// GetData returns the value of Data.
func (s *GetStationByIdOK) GetData() OptStation {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetStationByIdOK) SetData(val OptStation) {
	s.Data = val
}

func (*GetStationByIdOK) getStationByIdRes() {}

type GetStationsOK struct {
	Data []Station `json:"data"`
}

// GetData returns the value of Data.
func (s *GetStationsOK) GetData() []Station {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetStationsOK) SetData(val []Station) {
	s.Data = val
}

// Ref: #/components/schemas/Measurement
type Measurement struct {
	Datetime    OptMeasurementDateTime `json:"datetime"`
	Value       OptFloat64             `json:"value"`
	Coordinates OptCoordinates         `json:"coordinates"`
	SensorId    OptInt32               `json:"sensorId"`
	StationId   OptInt32               `json:"stationId"`
}

// GetDatetime returns the value of Datetime.
func (s *Measurement) GetDatetime() OptMeasurementDateTime {
	return s.Datetime
}

// GetValue returns the value of Value.
func (s *Measurement) GetValue() OptFloat64 {
	return s.Value
}

// GetCoordinates returns the value of Coordinates.
func (s *Measurement) GetCoordinates() OptCoordinates {
	return s.Coordinates
}

// GetSensorId returns the value of SensorId.
func (s *Measurement) GetSensorId() OptInt32 {
	return s.SensorId
}

// GetStationId returns the value of StationId.
func (s *Measurement) GetStationId() OptInt32 {
	return s.StationId
}

// SetDatetime sets the value of Datetime.
func (s *Measurement) SetDatetime(val OptMeasurementDateTime) {
	s.Datetime = val
}

// SetValue sets the value of Value.
func (s *Measurement) SetValue(val OptFloat64) {
	s.Value = val
}

// SetCoordinates sets the value of Coordinates.
func (s *Measurement) SetCoordinates(val OptCoordinates) {
	s.Coordinates = val
}

// SetSensorId sets the value of SensorId.
func (s *Measurement) SetSensorId(val OptInt32) {
	s.SensorId = val
}

// SetStationId sets the value of StationId.
func (s *Measurement) SetStationId(val OptInt32) {
	s.StationId = val
}

// Ref: #/components/schemas/MeasurementDateTime
type MeasurementDateTime struct {
	Utc   OptString `json:"utc"`
	Local OptString `json:"local"`
}

// GetUtc returns the value of Utc.
func (s *MeasurementDateTime) GetUtc() OptString {
	return s.Utc
}

// GetLocal returns the value of Local.
func (s *MeasurementDateTime) GetLocal() OptString {
	return s.Local
}

// SetUtc sets the value of Utc.
func (s *MeasurementDateTime) SetUtc(val OptString) {
	s.Utc = val
}

// SetLocal sets the value of Local.
func (s *MeasurementDateTime) SetLocal(val OptString) {
	s.Local = val
}

// NewOptCoordinates returns new OptCoordinates with value set to v.
func NewOptCoordinates(v Coordinates) OptCoordinates {
	return OptCoordinates{
		Value: v,
		Set:   true,
	}
}

// OptCoordinates is optional Coordinates.
type OptCoordinates struct {
	Value Coordinates
	Set   bool
}

// IsSet returns true if OptCoordinates was set.
func (o OptCoordinates) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCoordinates) Reset() {
	var v Coordinates
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCoordinates) SetTo(v Coordinates) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCoordinates) Get() (v Coordinates, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCoordinates) Or(d Coordinates) Coordinates {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCountry returns new OptCountry with value set to v.
func NewOptCountry(v Country) OptCountry {
	return OptCountry{
		Value: v,
		Set:   true,
	}
}

// OptCountry is optional Country.
type OptCountry struct {
	Value Country
	Set   bool
}

// IsSet returns true if OptCountry was set.
func (o OptCountry) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCountry) Reset() {
	var v Country
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCountry) SetTo(v Country) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCountry) Get() (v Country, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCountry) Or(d Country) Country {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMeasurementDateTime returns new OptMeasurementDateTime with value set to v.
func NewOptMeasurementDateTime(v MeasurementDateTime) OptMeasurementDateTime {
	return OptMeasurementDateTime{
		Value: v,
		Set:   true,
	}
}

// OptMeasurementDateTime is optional MeasurementDateTime.
type OptMeasurementDateTime struct {
	Value MeasurementDateTime
	Set   bool
}

// IsSet returns true if OptMeasurementDateTime was set.
func (o OptMeasurementDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMeasurementDateTime) Reset() {
	var v MeasurementDateTime
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMeasurementDateTime) SetTo(v MeasurementDateTime) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMeasurementDateTime) Get() (v MeasurementDateTime, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMeasurementDateTime) Or(d MeasurementDateTime) MeasurementDateTime {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStation returns new OptStation with value set to v.
func NewOptStation(v Station) OptStation {
	return OptStation{
		Value: v,
		Set:   true,
	}
}

// OptStation is optional Station.
type OptStation struct {
	Value Station
	Set   bool
}

// IsSet returns true if OptStation was set.
func (o OptStation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStation) Reset() {
	var v Station
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStation) SetTo(v Station) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStation) Get() (v Station, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStation) Or(d Station) Station {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Parameter
type Parameter struct {
	ID          OptInt32  `json:"id"`
	Name        OptString `json:"name"`
	Units       OptString `json:"units"`
	DisplayName OptString `json:"displayName"`
}

// GetID returns the value of ID.
func (s *Parameter) GetID() OptInt32 {
	return s.ID
}

// GetName returns the value of Name.
func (s *Parameter) GetName() OptString {
	return s.Name
}

// GetUnits returns the value of Units.
func (s *Parameter) GetUnits() OptString {
	return s.Units
}

// GetDisplayName returns the value of DisplayName.
func (s *Parameter) GetDisplayName() OptString {
	return s.DisplayName
}

// SetID sets the value of ID.
func (s *Parameter) SetID(val OptInt32) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Parameter) SetName(val OptString) {
	s.Name = val
}

// SetUnits sets the value of Units.
func (s *Parameter) SetUnits(val OptString) {
	s.Units = val
}

// SetDisplayName sets the value of DisplayName.
func (s *Parameter) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// Ref: #/components/schemas/Station
type Station struct {
	ID         OptInt32    `json:"id"`
	Name       OptString   `json:"name"`
	Locality   OptString   `json:"locality"`
	Timezone   OptString   `json:"timezone"`
	Country    OptCountry  `json:"country"`
	Parameters []Parameter `json:"parameters"`
}

// GetID returns the value of ID.
func (s *Station) GetID() OptInt32 {
	return s.ID
}

// GetName returns the value of Name.
func (s *Station) GetName() OptString {
	return s.Name
}

// GetLocality returns the value of Locality.
func (s *Station) GetLocality() OptString {
	return s.Locality
}

// GetTimezone returns the value of Timezone.
func (s *Station) GetTimezone() OptString {
	return s.Timezone
}

// GetCountry returns the value of Country.
func (s *Station) GetCountry() OptCountry {
	return s.Country
}

// GetParameters returns the value of Parameters.
func (s *Station) GetParameters() []Parameter {
	return s.Parameters
}

// SetID sets the value of ID.
func (s *Station) SetID(val OptInt32) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Station) SetName(val OptString) {
	s.Name = val
}

// SetLocality sets the value of Locality.
func (s *Station) SetLocality(val OptString) {
	s.Locality = val
}

// SetTimezone sets the value of Timezone.
func (s *Station) SetTimezone(val OptString) {
	s.Timezone = val
}

// SetCountry sets the value of Country.
func (s *Station) SetCountry(val OptCountry) {
	s.Country = val
}

// SetParameters sets the value of Parameters.
func (s *Station) SetParameters(val []Parameter) {
	s.Parameters = val
}
